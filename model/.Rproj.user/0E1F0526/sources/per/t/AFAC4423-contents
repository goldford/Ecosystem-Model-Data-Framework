---
title: "R notebook for visualising DCI"
output: html_notebook
---

```{r}
install.packages("patchwork")
```

```{r}
library(dplyr)
library(ggplot2)
library(tidyr)
library(patchwork)

path_f = "C:/Users/Greig/Sync/1. UBC-Laptop/42. Ontario Mahlum Re-analysis/3_ReAnalysis_Spring2021/Results/"

rslts_wilmot = "Sc2_Wilmot_FishSurveyDCI.csv"
rslts_oshawa= "Sc2_Oshawa_FishSurveyDCI.csv"
rslts_duffins= "Sc2_Duffins_FishSurveyDCI.csv"
rslts_ganaraska= "Sc2_Ganaraska_FishSurveyDCI.csv"
rslts_cobourg= "Sc2_Cobourg_FishSurveyDCI.csv"

data_wilmot <- read.csv(paste(path_f,rslts_wilmot,sep=""))
data_oshawa <- read.csv(paste(path_f, rslts_oshawa,sep=""))
data_duffins <- read.csv(paste(path_f, rslts_duffins,sep=""))
data_ganaraska <- read.csv(paste(path_f, rslts_ganaraska,sep=""))
data_cobourg <- read.csv(paste(path_f, rslts_cobourg,sep=""))

#combine
combined_data <- bind_rows(data_wilmot, data_oshawa, data_duffins, data_ganaraska, data_cobourg)

# Print the combined data
print(combined_data)


```

```{r}

# Use dplyr to calculate averages grouped by 'sitecode' and 'stream'
result <- combined_data %>%
  group_by(SITECODE, STREAM, FIPEX_sub, FIPEX_seg) %>%
  summarise(across(where(is.numeric), mean, na.rm = TRUE))

# Display the result
print(result)


# 
# columns_to_convert <- 3:78
# 
# # Use dplyr to convert selected columns to numeric
# sc1_data <- sc1_data %>%
#   mutate_at(vars(columns_to_convert), as.numeric)
# head(sc1_data)
```


```{r}
# Shouldn't we also be stratifying / grouping by FIPEX_sub / FIPEX_seg?
result_grp_seg <- result %>%
  group_by(STREAM, FIPEX_sub, FIPEX_seg) %>%
  summarise(across(where(is.numeric), mean, na.rm = TRUE))

# Display the result
print(result_grp_seg)


```


```{r}
# aggregatee based on species codes from ontariofish.ca
result_grp_seg2 <- result_grp_seg %>%
  mutate(`Eel-like large` = X12 + X11 + X14) %>%
  mutate(`Elongated large` = X192 + X235 + X342 + X212) %>%
  mutate(`Elongated small` = X184 + X381 + X382 + X337 + X339 + X341 + X189 + X214 + X197 + X200 + X211) %>%
  mutate('Rainbow Trout' = X76) %>%
  mutate('Brook Trout' = X80) %>%
  mutate(`Normal large` = X233 + X162 + X163 + X76 + X331 + X77 + X78 + X80) %>%
  mutate(`Normal small` = X203 + X198 + X316 + X204 + X206 + X182 + X209 + X210) %>%
  mutate(`Short-deep large` = X311 + X312 ) %>%
  mutate(`Short-deep small` = X313 ) 
  #select(-X313)

print(result_grp_seg2)
```
```{r}
# to log transform replace .data[[yv]] w/ log(data[[yv]],+.1)

# Specify the variables for scatter plots
scatter_vars <- c('Eel-like large', 'Elongated large', 'Elongated small', 'Normal large', 'Normal small')
dcis_vars <- c('S2_DCIs_NoDD','S2_DCIs10kmCu','S2_DCIs1kmCu')
dcis_labs <- c('DCIs struc.','DCIs func. \n10 km thr.','DCIs func. \n1 km thr.')

plots_list <- list()

i = 1
for (dcis_var in dcis_vars) {
  
#print(scatter_var)
#plot_data <- result_grp_seg2 %>%
#  select(dcis_var, scatter_var)

xv = dcis_var
yv = scatter_vars[[1]]
x_lab_sct = dcis_labs[[i]]
if (i == 1) {
  sctr_ttl = stringr::str_wrap(paste(yv), width=10)
} else {
  sctr_ttl = ""
}

pnt_sz = 0.2
lab_sz = 7
ttl_sz = 7

# Scatter Plot
scatter_plot1 <- ggplot(result_grp_seg2, aes(x = .data[[xv]], y = .data[[yv]] )) +
  geom_point(size=pnt_sz) +
  labs(title = sctr_ttl, x = "", y = "Tot. Abun.") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

yv = scatter_vars[[2]]
if (i == 1) {
  sctr_ttl = stringr::str_wrap(paste(yv), width=10)
} else {
  sctr_ttl = ""
}
scatter_plot2 <- ggplot(result_grp_seg2, aes(x = .data[[xv]], y = .data[[yv]] )) +
  geom_point(size=pnt_sz) +
  labs(title = sctr_ttl, x = "",y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

yv = scatter_vars[[3]]
if (i == 1) {
  sctr_ttl = stringr::str_wrap(paste(yv), width=10)
} else {
  sctr_ttl = ""
}
scatter_plot3 <- ggplot(result_grp_seg2, aes(x = .data[[xv]], y = .data[[yv]] )) +
  geom_point(size=pnt_sz) +
  labs(title = sctr_ttl, x = x_lab_sct,y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

yv = scatter_vars[[4]]
if (i == 1) {
  sctr_ttl = stringr::str_wrap(paste(yv), width=10)
} else {
  sctr_ttl = ""
}
scatter_plot4 <- ggplot(result_grp_seg2, aes(x = .data[[xv]], y = .data[[yv]] )) +
  geom_point(size=pnt_sz) +
  labs(title = sctr_ttl, x = "",y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

yv = scatter_vars[[5]]
if (i == 1) {
  sctr_ttl = stringr::str_wrap(paste(yv), width=10)
} else {
  sctr_ttl = ""
}
scatter_plot5 <- ggplot(result_grp_seg2, aes(x = .data[[xv]], y = .data[[yv]] )) +
  geom_point(size=pnt_sz) +
  labs(title = sctr_ttl, x = "",y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

# Histogram
histogram_plot <- ggplot(result_grp_seg2, aes(x = .data[[xv]])) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
  #labs(title = "", x = xv, y = "Frequency") +
  labs(title = "", x = "", y = "Frequency") +
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

# Combine the plots
# Combine the plots using patchwork
combined_plots <- scatter_plot1 / scatter_plot2 / scatter_plot3 / scatter_plot4 / scatter_plot5 / histogram_plot +
  plot_layout(ncol = 6, guides = "collect", heights = 1)

# Add the combined plot to the list
plots_list[[paste(yv, dcis_var)]] <- combined_plots

i = i + 1
}

# Display the combined plot
print(plots_list)

```
```{r}

plots_list[[1]] / plots_list[[2]] / plots_list[[3]] 

```
Consider that the sampling across all DCI segment values is not uniform and 
this obviously could be playing a roll skewing interpretation. 

This is because the true distribution of abundance is unknown and we don't know how many samples we need to conceivably capture the true distribution. If the distribution is log-normal or the skewed low with a long tail upwards into high abundance, then the few samples we have of abundances at low DCI values would be expected to be biased to low abundance values. 
```{r}
# Create bins for DCI values
bins <- seq(0, 100, by = 10)

dcis_var = "DCIs10kmCu"
scatter_var = "Elongated large"

# Bin the DCI values and create a new column with bin labels
df <- result_grp_seg2 %>%
  select(dcis_var,scatter_var) %>%
  mutate(DCI_bins = cut(.data[[dcis_var]], breaks = bins, labels = FALSE, right = FALSE))

# Create a violin plot using ggplot2
p <- ggplot(df, aes(x = as.factor(DCI_bins), y = .data[[scatter_var]])) +
  
  labs(title = "Violin Plot of DCI Bins vs. Abundance",
       x = "DCI Bins",
       y = "Abundance") +
  geom_jitter(aes(color = as.factor(DCI_bins)), width = 0.2, alpha = 0.7) +
   #scale_color_discrete(name = "DCI Bins") +
  geom_violin() +
   theme_minimal()
p
```



```{r}
# try looking at presence absence
body_type_fields <- c('Eel-like large', 'Elongated large', 'Elongated small', 'Normal large', 'Normal small')
result_grp_seg3 <- result_grp_seg2 %>%
  mutate(across(all_of(body_type_fields), 
                list(presabs = ~ ifelse(. > 0, 1, 0)),
                .names = "{col}_{fn}"))

result_grp_seg3
```
```{r}
# Specify the variables for scatter plots
scatter_vars <- c('Eel-like large_presabs', 'Elongated large_presabs', 'Elongated small_presabs', 'Normal large_presabs', 'Normal small_presabs')
dcis_vars <- c('DCIsNoDD','DCIs5kmCu', 'DCIs10kmCu')

plots_list <- list()

n = 0
for (dcis_var in dcis_vars) {
  
#print(scatter_var)
#plot_data <- result_grp_seg2 %>%
#  select(dcis_var, scatter_var)

xv = dcis_var
yv = scatter_vars[[1]]

pnt_sz = 0.2
lab_sz = 7
ttl_sz = 7

if (n == 0) {
  title_str = stringr::str_wrap(paste(yv), width=10)
} else {
  title_str = ""
}

# Scatter Plot
scatter_plot1 <- ggplot(result_grp_seg3, aes(x = .data[[xv]], y = .data[[yv]])) +
  geom_point(size=pnt_sz) +
  labs(title = title_str, x = xv, y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

yv = scatter_vars[[2]]
scatter_plot2 <- ggplot(result_grp_seg3, aes(x = .data[[xv]], y = .data[[yv]])) +
  geom_point(size=pnt_sz) +
  labs(title = title_str, x = xv,y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

yv = scatter_vars[[3]]
scatter_plot3 <- ggplot(result_grp_seg3, aes(x = .data[[xv]], y = .data[[yv]])) +
  geom_point(size=pnt_sz) +
  labs(title = title_str, x = xv,y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

yv = scatter_vars[[4]]
scatter_plot4 <- ggplot(result_grp_seg3, aes(x = .data[[xv]], y = .data[[yv]])) +
  geom_point(size=pnt_sz) +
  labs(title = title_str, x = xv,y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

yv = scatter_vars[[5]]
scatter_plot5 <- ggplot(result_grp_seg3, aes(x = .data[[xv]], y = .data[[yv]])) +
  geom_point(size=pnt_sz) +
  labs(title = title_str, x = xv,y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

# Histogram
histogram_plot <- ggplot(result_grp_seg3, aes(x = .data[[xv]])) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "", x = xv, y = "Frequency") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )

# Combine the plots
# Combine the plots using patchwork
combined_plots <- scatter_plot1 / scatter_plot2 / scatter_plot3 / scatter_plot4 / scatter_plot5 / histogram_plot +
  plot_layout(ncol = 6, guides = "collect", heights = 1)

# Add the combined plot to the list
plots_list[[paste(yv, dcis_var)]] <- combined_plots

n = n + 1
}

# Display the combined plot
print(plots_list)
```
```{r}
plots_list[[1]] / plots_list[[2]] / plots_list[[3]] 
```
```{r}
# for each species, go through and cross check the pres abs vs dci
# 22 - 96 col
result_grp_seg3

# Assuming the fields are from column 22 to 96
field_indices <- 22:96

pnt_sz = 1
lab_sz = 10
ttl_sz = 12

# Loop through each field index
for (i in field_indices) {
  
  xv = "DCIs10kmCu"
  
  # Extract the field name
  field_name <- colnames(result_grp_seg3)[i]
  
  # Transform the values to binary (1 if > 0, else 0)
  #binary_field_name <- paste0(field_name, "_binary")
  #result_grp_seg3[[binary_field_name]] <- ifelse(result_grp_seg3[[field_name]] > 0, 1, 0)
  #fname = binary_field_name
  #scatter_data1 = result_grp_seg3
  
  # Dump the zeros
  #binary_field_name <- paste0(field_name, "_nozeros")
  #result_grp_seg3[[binary_field_name]] <- ifelse(result_grp_seg3[[field_name]] > 0, 1, 0)
  #fname = binary_field_name
  scatter_data1 = result_grp_seg3  %>%
    select(field_name, xv) %>%
    filter(.data[[field_name]] > 0.1)
  
  fname = field_name
  
  title_str = paste(fname,"vs", xv)
  
  scatter_plot4 <- ggplot(scatter_data1, aes(x = .data[[xv]], y = .data[[fname]])) +
  geom_point(size=pnt_sz) +
  labs(title = title_str, x = xv,y = "") + 
  theme(
    text = element_text(size = lab_sz),           # Adjust the overall text size
    axis.text = element_text(size = lab_sz),      # Adjust the axis text size
    axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
  )
  
  # Save the plot
  ggsave(paste("scatter_plot_", fname, xv, ".png", sep = ""), device = "png")
  
  
  histogram_plot <- ggplot(scatter_data1, aes(x = .data[[xv]])) +
    geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
    labs(title = "", x = xv, y = "Frequency") + 
    theme(
      text = element_text(size = lab_sz),           # Adjust the overall text size
      axis.text = element_text(size = lab_sz),      # Adjust the axis text size
      axis.title = element_text(size = ttl_sz)     # Adjust the axis title size
    )
  
  ggsave(paste("histo_plot_", fname, xv, ".png", sep = ""), device = "png")

  
}

```


```{r}
field_name
result_grp_seg3  %>%
    select(field_name, xv) %>%
    filter(.data[[field_name]] > 0.1)

```
```{r}


# Create bins for DCI values
bins <- seq(0, 100, by = 10)

dcis_var = "DCIs10kmCu"
scatter_var = "X382"

# Bin the DCI values and create a new column with bin labels
df <- scatter_data1 %>%
  mutate(DCI_bins = cut(.data[[dcis_var]], breaks = bins, labels = FALSE, right = FALSE))
df

# Create a violin plot using ggplot2
p <- ggplot(df, aes(x = as.factor(DCI_bins), y = .data[[scatter_var]])) +
  geom_violin() +
  labs(title = "Violin Plot of DCI Bins vs. Abundance",
       x = "DCI Bins",
       y = "Abundance") +
  geom_jitter(aes(color = as.factor(DCI_bins)), width = 0.2, alpha = 0.7) +
   scale_color_discrete(name = "DCI Bins") +
   theme_minimal()
p
```


Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.

When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).

The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
